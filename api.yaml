openapi: 3.0.3
info:
  title: Swagger Product Card Service - OpenAPI 3.0
  description: |-
    This is Product Card Service based on the OpenAPI 3.0 specification.
  version: 0.0.1
tags:
  - name: card
    description: Everything about cards
  - name: ai
    description: Everything about AI and generation
paths:
  /cards:
    post:
      tags:
        - card
      summary: Creates new product card
      description: Creates new product card
      operationId: createCard
      requestBody:
        description: Creates new product card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateCard'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'          
        '400':
          description: Invalid country_id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
    get:
      tags:
        - card
      summary: Gets all cards
      description: Gets all cards
      operationId: getAllCards
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardList'
        '500':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
  /cards/{card_id}:  
    get:
      tags:
        - card
      summary: Gets card
      description: Gets card
      operationId: getCard
      parameters:
        - name: card_id
          in: path
          description: ID of card to return
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullCard'          
        '404':
          description: Not found card with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
    put:
      tags:
        - card
      summary: Updates existing product card
      description: Updates existing product card
      operationId: updateCard
      parameters:
        - name: card_id
          in: path
          description: ID of card to update
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        description: Updates existing product card
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateCard'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'          
        '404':
          description: Not found card with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
    delete:
      tags:
        - card
      summary: Removes existing card
      description: Removes existing card by card_id
      operationId: deleteCard
      parameters:
        - name: card_id
          in: path
          description: ID of card to removing
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Successful operation
        '404':
          description: Not found card with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
  /cards/{card_id}/image:  
    get:
      tags:
        - card
      summary: Gets image for card
      description: Gets image for card
      operationId: getCardImage
      parameters:
        - name: card_id
          in: path
          description: ID of card to return
          required: true
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardImage'          
        '404':
          description: Not found card with this id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
  /generate/descriptions:
    post:
      tags:
        - ai
      summary: Generates 4 descriptions of product with AI
      description:  Generates 4 descriptions of product with AI
      operationId: generateDescriptions
      requestBody:
        description: Generates 4 descriptions of product with AI
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prompt'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedDescriptions'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
  /generate/tags:
    post:
      tags:
        - ai
      summary: Generates tags for product with AI
      description: Generates tags for product with AI
      operationId: generateTags
      requestBody:
        description: Generates tags for product with AI
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prompt'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedTags'          
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
  /generate/images:
    post:
      tags:
        - ai
      summary: Generates 4 images of product with AI
      description: Generates 4 images of product with AI
      operationId: generateImages
      requestBody:
        description: Generates 4 images of product with AI
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prompt'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratedImages'          
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Текст ошибки
    CreateUpdateCard:
      type: object
      required:
        - title
        - description
        - tags
        - image
      properties:
        title:
          type: string
          example: Лапша с мясом
        description:
          type: string
          example: Борщ — заправочный многокомпонентный суп и является технологически сложным в приготовлении блюдом.
        tags:
          type: array
          items:
            type: string
            example: блюдо с мясом
        image:
          type: string
          example: data:image/png;base64,<encoded-image>
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Лапша с мясом
        description:
          type: string
          example: Борщ — заправочный многокомпонентный суп и является технологически сложным в приготовлении блюдом.
        tags:
          type: array
          items:
            type: string
            example: блюдо с мясом
    FullCard:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Лапша с мясом
        description:
          type: string
          example: Борщ — заправочный многокомпонентный суп и является технологически сложным в приготовлении блюдом.
        tags:
          type: array
          items:
            type: string
            example: блюдо с мясом
        image:
          type: string
          example: data:image/png;base64,<encoded-image>
    CardList:
      type: object
      properties:
        cards:
          type: array
          items: 
            $ref: '#/components/schemas/Card'
    CardImage:
      type: object
      properties:
        image:
          type: string
          example: data:image/png;base64,<encoded-image>
    Prompt:
      type: object
      properties:
        title:
          type: string
          example: Лапша с мясом
    GeneratedDescriptions:
      type: object
      properties:
        descriptions:
          type: array
          items:
            type: string
            example: Борщ — заправочный многокомпонентный суп и является технологически сложным в приготовлении блюдом.
    GeneratedTags:
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
            example: блюдо с мясом
    GeneratedImages:
      type: object
      properties:
        images:
          type: array
          items:
              type: string
              example: data:image/png;base64,<encoded-image>
